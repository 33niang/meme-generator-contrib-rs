use skia_safe::{Color, Image};

use meme_generator_core::error::Error;
use meme_generator_utils::{
    builder::InputImage,
    encoder::{make_gif_or_combined_gif, FrameAlign, GifInfo},
    image::{Fit, ImageExt},
    tools::{load_image, local_date, new_surface},
};

use crate::{options::NoOptions, register_meme};

fn fleshlight(images: Vec<InputImage>, _: Vec<String>, _: NoOptions) -> Result<Vec<u8>, Error> {
    let params = [
        ([(0, 6), (205, 0), (213, 157), (8, 171)], (117, 59)),
        ([(0, 6), (205, 0), (213, 157), (8, 171)], (117, 59)),
        ([(0, 6), (205, 0), (213, 157), (8, 171)], (117, 59)),
        ([(0, 7), (204, 0), (213, 157), (8, 172)], (118, 58)),
        ([(0, 6), (207, 0), (213, 158), (8, 173)], (119, 57)),
        ([(0, 6), (207, 0), (213, 158), (8, 173)], (119, 57)),
        ([(0, 6), (207, 0), (213, 158), (8, 173)], (119, 57)),
        ([(0, 6), (205, 0), (212, 157), (7, 171)], (121, 58)),
        ([(0, 6), (205, 0), (212, 157), (7, 171)], (121, 58)),
        ([(0, 6), (206, 0), (212, 158), (8, 172)], (121, 56)),
        ([(0, 6), (206, 0), (212, 158), (8, 172)], (121, 56)),
        ([(0, 6), (207, 0), (214, 157), (10, 171)], (121, 55)),
        ([(0, 7), (201, 0), (218, 154), (13, 169)], (121, 49)),
        ([(0, 7), (195, 0), (219, 147), (18, 162)], (118, 50)),
        ([(0, 4), (196, 0), (223, 133), (18, 143)], (114, 54)),
        ([(0, 0), (192, 1), (219, 121), (17, 124)], (115, 58)),
        ([(0, 0), (188, 5), (220, 110), (20, 107)], (112, 61)),
        ([(0, 0), (185, 15), (217, 86), (26, 73)], (108, 72)),
        ([(0, 0), (182, 19), (234, 67), (34, 44)], (102, 88)),
        ([(0, 0), (175, 25), (224, 55), (22, 23)], (111, 105)),
        ([(0, 0), (167, 29), (209, 49), (13, 14)], (121, 110)),
        ([(0, 0), (144, 27), (195, 46), (8, 8)], (135, 110)),
        ([(0, 0), (177, 36), (206, 59), (13, 18)], (129, 93)),
        ([(0, 0), (180, 38), (211, 69), (16, 25)], (126, 83)),
        ([(0, 0), (181, 28), (220, 70), (26, 39)], (119, 82)),
        ([(0, 0), (180, 17), (227, 65), (27, 45)], (115, 89)),
        ([(0, 0), (181, 15), (230, 63), (33, 46)], (110, 95)),
        ([(0, 0), (184, 24), (228, 73), (27, 47)], (91, 102)),
        ([(0, 0), (189, 8), (208, 73), (0, 66)], (83, 94)),
        ([(19, 0), (202, 25), (204, 85), (0, 58)], (63, 82)),
        ([(12, 0), (196, 18), (205, 70), (0, 50)], (70, 87)),
        ([(4, 0), (189, 17), (205, 74), (0, 53)], (82, 79)),
        ([(0, 0), (184, 18), (205, 72), (1, 51)], (91, 74)),
        ([(0, 0), (183, 17), (206, 69), (4, 52)], (92, 73)),
    ];

    let func = |i: usize, images: Vec<Image>| {
        let frame = load_image(format!("fleshlight/{i:02}.png"))?;
        let mut surface = new_surface(frame.dimensions());
        let canvas = surface.canvas();
        canvas.clear(Color::WHITE);
        let img = images[0].resize_fit((210, 170), Fit::Cover);
        let (points, pos) = params[i];
        let img = img.perspective(&points);
        canvas.draw_image(&img, pos, None);
        canvas.draw_image(&frame, (0, 0), None);
        Ok(surface.image_snapshot())
    };

    make_gif_or_combined_gif(
        images,
        func,
        GifInfo {
            frame_num: 34,
            duration: 0.1,
        },
        FrameAlign::ExtendFirst,
    )
}

register_meme!(
    "fleshlight",
    fleshlight,
    min_images = 1,
    max_images = 1,
    keywords = &["飞机杯"],
    date_created = local_date(2023, 4, 29),
    date_modified = local_date(2023, 4, 29),
);
